import streamlit as st

import pandas as pd
import numpy as np
import json
import base64

import re
import requests
import SessionState
import streamlit.components.v1 as components
from fpdf import FPDF





#Function definitions

def runBatchInference():
   url = "http://127.0.0.1:8000/"
   url = url +'startBatchInference'
   response = requests.get(url).json()
   return(response)

def getReport(patId):
   url = "http://127.0.0.1:8000/"
   url = url +'report/'+patId
   response = requests.get(url).json()
   return(response)

def get_file_download_link(report):
    """Generates a link allowing the data in a given panda dataframe to be downloaded
    in:  dataframe
    out: href string
    """
   # b64 = base64.b64encode(report).decode()  # some strings <-> bytes conversions necessary here
    
    href = f'<a href="data:file/html;base64,{report}" download="report" >Download  Report</a>'



def saveConfiguration(db_features, report_features):
    return(1)



def create_download_link(val, filename):
    b64 = base64.b64encode(val)  # val looks like b'...'
    return f'<a href="data:application/octet-stream;base64,{b64.decode()}" download="{filename}.pdf">Download Report</a>'



def render_report(rep_data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font('Arial', 'B', 16)
    pdf.multi_cell(300, 20, '            AI generated Hand X-ray Report', 0,3)
    #pdf.multi_cell(300, 20, ' Hand X-ray Generated Report', 0,3, 'C')
    pdf.line(0, 30, pdf.w, 30)

#    pdf.multi_cell(300, 20, 'Hand X-ray Generated Report', 0,2)

    rep_image = rep_data.pop('image') 
    pdf.image(rep_image, 150 ,40, 50,type='png' )
    for key,value in rep_data.items():
       text = key + '   :     '+ value
       pdf.set_font('Arial', '',  12)
       pdf.multi_cell(300, 15,  text, 0,1)
    
    
    base64_pdf = base64.b64encode(pdf.output(dest="S").encode("latin-1")).decode('utf-8')
    pdf_display = f'<embed src="data:application/pdf;base64,{base64_pdf}" width="700" height="1000" type="application/pdf">' 
    st.markdown(pdf_display, unsafe_allow_html=True) 
    
    html = create_download_link(pdf.output(dest="S").encode("latin-1"), "Report")
    st.markdown(html, unsafe_allow_html=True)


#### Application starts
st.sidebar.image('nav.jpg')
st.sidebar.write(' Welcome to AI Medical Imaging Application')
selection = st.sidebar.selectbox("Go to page:", ['Configuration' , 'Dashboard ',   'Reports'])


#Main Window

session_state = SessionState.get(patients_list=[])

st.image('main.png')
st.title('AI  Medical Imaging X-Ray Application   ')
if selection == 'Configuration':
        st.header('Configuration of Database and  X-ray Report ')
        st.write("The DICOM features for database and report can be selected here") 

        features = ['Patient ID','Patient Age','Patient Birth Date', 'Patient Sex','Study Date','Acquisition Date', 'Modality','Body Part Examined', 'View Position','Study Description', 'Fracture Detection',  'Institution Name', 'Frontal Image']



        #l2 = []
        #l2=features
        #l2.append('Select all')
        db_features = st.multiselect(" Select features for AI model Database ", features )

        #if 'Select all' in db_features :
	#        db_features=features.remove('Select all')
        
       
        report_features = st.multiselect(" Select featured for X-ray report ", db_features, default=db_features )
        
        if st.button('Save Configuration '):
           result = saveConfiguration(db_features, report_features)
           st.write('Configuration parameters for daatbase and report are saved')
  
elif selection == 'Dashboard ':
        st.header(' Dashboard for AI Model for X-ray Fracture Detection')
        st.write(' X-Ray Inference model is run in batches at the backend in timed intervals. Select the button below to run batch inference now')
        if st.button('Run Batch Inference Now'):
           result = runBatchInference()
           print(result) 
           summary_df = pd.DataFrame(result)
           data = summary_df.to_html(escape=False)
           #st.write(summary_df)
           #cols=["PatientID","PatientAge","PatientBirthDate","PatientSex","Modality", "StudyDscription","Fracture" ]
           patientslist= summary_df['PatientID'].to_list()
           session_state.patients_list = patientslist
           st.write("## AI Model Batch Inference Summary :")
           st.write(summary_df)
           #st.write(data,unsafe_allow_html=True)


elif selection == 'Reports':
        st.header('Reports')
        st.write(' The AI Inference pipeline generates the report with the features selected in the configuration page of the application')
        st.write(' The X-ray report generated by the AI Inference Engine can be viewed here and downloaded')
        rep_patientId = st.selectbox('Select Patient ID for generating the report', session_state.patients_list)
    
        if st.button('Get Report'):
            report = getReport(rep_patientId)
            render_report(report)
        #components.html(report, 1000, 500)
        #download = st.button('Download Report')
        #if download:
        #    get_file_download_link(report)





