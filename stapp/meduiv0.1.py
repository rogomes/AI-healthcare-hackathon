import streamlit as st

import pandas as pd
import numpy as np
import json
import base64

import re
import requests
import SessionState
import streamlit.components.v1 as components





#Function definitions

def runBatchInference():
   url = "http://127.0.0.1:8000/"
   url = url +'startBatchInference'
   response = requests.get(url).json()
   return(response)

def getReport(patId):
   url = "http://127.0.0.1:8000/"
   url = url +'report'
   #req = get_request_params(
   #resp = requests.get(url,
   #                     json=req).json()
   response = requests.get(url)
   print(response.text)
   return(response.text)

def get_file_download_link(report):
    """Generates a link allowing the data in a given panda dataframe to be downloaded
    in:  dataframe
    out: href string
    """
   # b64 = base64.b64encode(report).decode()  # some strings <-> bytes conversions necessary here
    
    href = f'<a href="data:file/html;base64,{report}" download="report" >Download  Report</a>'



def saveConfiguration(db_features, report_features):
    return(1)

#### Application starts
st.sidebar.markdown('# Navigation')
selection = st.sidebar.selectbox("Go to page:", ['Configuration' , 'Dashboard ',   'Reports'])


#Main Window
session_state = SessionState.get(patients_list=[])


st.write('### Medical Imaging X-Ray Application   ')
if selection == 'Configuration':
        st.write('#### Configuration of Database of AI Model for Hand X-ray Fracture Detection')
        st.write("The features saved in the database for AI Model of hand X-ray frature detection and the report features can be selected here") 
        db_features = st.multiselect(" Select X-ray AI model Database features ",
		        ['Patient ID', 'Patient Age', 'Patient Birth Date'])

        report_features = st.multiselect(" Select features in AI generated X-ray report from Database features ",
		           db_features)
        
        if st.button('Save Configuration '):
           result = saveConfiguration(db_features, report_features)
  
elif selection == 'Dashboard ':
        st.write('### Dashboard for X-Ray AI Model')
        st.write('#### X-Ray Inference model is run in batches at the backend in timed intervals. Select the button below to run batch inference now')
        if st.button('Run Batch of Test Images Now'):
           result = runBatchInference()
           cols=["PatientID","PatientAge","PatientBirthDate","PatientSex","Modality", "StudyDscription","Fracture" ]
           summary_df = pd.DataFrame(result,columns=cols)
           patientslist= summary_df['PatientID'].to_list()
           session_state.patients_list = patientslist
           data = summary_df[cols].to_html(escape=False)
           st.write("## AI Model Batch Inference Summary :")
           st.write(data,unsafe_allow_html=True)

                


#HtmlFile = open("test.html", 'r', encoding='utf-8')
#source_code = HtmlFile.read() 
#components.html(source_code)           

elif selection == 'Reports':
        st.write('###  Reports')
        st.write('####  The X-ray report generated by the Inference Engine can be retrieved here with the pateint ID')
        rep_patientId = st.selectbox('Select Patient ID for generating the report', session_state.patients_list)
        report = getReport(rep_patientId)
        #st.write("#### AI Generated X-ray  Report")
        #st.write(report, unsafe_allow_html=True)
        components.html(report, 1000, 500)
        #st.markdown(get_file_download_link(report), unsafe_allow_html=True)
        download = st.button('Download Report')
        if download:
            get_file_download_link(report)


